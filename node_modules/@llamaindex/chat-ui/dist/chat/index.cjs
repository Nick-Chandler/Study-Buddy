Object.defineProperty(exports, '__esModule', { value: true });

var actions12s = require('./actions-12s-CuAyAEDg.cjs');
var _extends = require('@swc/helpers/_/_extends');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var _async_to_generator = require('@swc/helpers/_/_async_to_generator');
var lucideReact = require('lucide-react');
var _object_without_properties_loose = require('@swc/helpers/_/_object_without_properties_loose');
var index_cjs = require('../widgets/index.cjs');
var context12s = require('./context-12s-Bd_RtAfM.cjs');
var useCopyToClipboard12s = require('./use-copy-to-clipboard-12s-B5vuZcRz.cjs');
var index12s = require('./index-12s-CdXppAyA.cjs');
var useFile12s = require('./use-file-12s-B1BiURmq.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return n;
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

const Textarea = /*#__PURE__*/ React__namespace.forwardRef((_param, ref)=>{
    var { className } = _param, props = _object_without_properties_loose._(_param, [
        "className"
    ]);
    return /*#__PURE__*/ jsxRuntime.jsx("textarea", _extends._({
        className: actions12s.cn('border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring focus-visible:outline-hidden flex min-h-[80px] w-full rounded-md border px-3 py-2 text-sm focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', className),
        ref: ref
    }, props));
});
Textarea.displayName = 'Textarea';

const chatInputContext = /*#__PURE__*/ React.createContext(null);
const ChatInputProvider = chatInputContext.Provider;
const useChatInput = ()=>{
    const context = React.useContext(chatInputContext);
    if (!context) {
        throw new Error('useChatInput must be used within a ChatInputProvider');
    }
    return context;
};
function ChatInput(props) {
    const { input, setInput, append, isLoading, requestData } = context12s.useChatUI();
    const isDisabled = isLoading || !input.trim();
    const [isComposing, setIsComposing] = React.useState(false);
    const submit = ()=>_async_to_generator._(function*() {
            const newMessage = {
                role: 'user',
                content: input,
                annotations: props.annotations
            };
            setInput('') // Clear the input
            ;
            props.resetUploadedFiles == null ? void 0 : props.resetUploadedFiles.call(props) // Reset the uploaded files
            ;
            yield append(newMessage, {
                data: requestData
            });
        })();
    const handleSubmit = (e)=>_async_to_generator._(function*() {
            e.preventDefault();
            yield submit();
        })();
    const handleKeyDown = (e)=>_async_to_generator._(function*() {
            if (isDisabled) return;
            if (e.key === 'Enter' && !e.shiftKey && !isComposing) {
                e.preventDefault();
                yield submit();
            }
        })();
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsx(ChatInputForm, {});
    return /*#__PURE__*/ jsxRuntime.jsx(ChatInputProvider, {
        value: {
            isDisabled,
            handleKeyDown,
            handleSubmit,
            isComposing,
            setIsComposing
        },
        children: /*#__PURE__*/ jsxRuntime.jsx("div", {
            className: actions12s.cn('bg-background flex shrink-0 flex-col gap-4 p-4 pt-0', props.className),
            children: children
        })
    });
}
function ChatInputForm(props) {
    const { handleSubmit } = useChatInput();
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(ChatInputField, {}),
            /*#__PURE__*/ jsxRuntime.jsx(ChatInputSubmit, {})
        ]
    });
    return /*#__PURE__*/ jsxRuntime.jsx("form", {
        onSubmit: handleSubmit,
        className: actions12s.cn('relative flex gap-2', props.className),
        children: children
    });
}
function ChatInputField(props) {
    const { input, setInput } = context12s.useChatUI();
    const { handleKeyDown, setIsComposing } = useChatInput();
    const textareaRef = React.useRef(null);
    // auto resize the textarea based on the content
    const handleInputChange = (e)=>{
        setInput(e.target.value);
        if (textareaRef.current) {
            textareaRef.current.style.height = 'auto';
            let newHeight = Math.max(textareaRef.current.scrollHeight, 100);
            if (textareaRef.current.scrollHeight > 80) {
                newHeight += 40 // offset for the textarea padding
                ;
            }
            textareaRef.current.style.height = `${newHeight}px`;
        }
    };
    var _props_placeholder;
    return /*#__PURE__*/ jsxRuntime.jsx(Textarea, {
        ref: textareaRef,
        name: "input",
        placeholder: (_props_placeholder = props.placeholder) != null ? _props_placeholder : 'Type a message...',
        className: actions12s.cn('bg-secondary h-[100px] max-h-[400px] min-h-0 flex-1 resize-none overflow-y-auto rounded-2xl p-4', props.className),
        value: input,
        onChange: handleInputChange,
        onKeyDown: handleKeyDown,
        onCompositionStart: ()=>setIsComposing(true),
        onCompositionEnd: ()=>setIsComposing(false),
        spellCheck: false
    });
}
function ChatInputUpload(props) {
    const { requestData, setRequestData, isLoading } = context12s.useChatUI();
    const onFileUpload = (file)=>_async_to_generator._(function*() {
            if (props.onUpload) {
                yield props.onUpload(file);
            } else {
                setRequestData(_extends._({}, requestData || {}, {
                    file
                }));
            }
        })();
    var _props_multiple;
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.FileUploader, {
        onFileUpload: onFileUpload,
        config: {
            disabled: isLoading,
            multiple: (_props_multiple = props.multiple) != null ? _props_multiple : true,
            allowedExtensions: props.allowedExtensions
        },
        className: actions12s.cn('hover:bg-primary absolute bottom-2 left-2 rounded-full', props.className)
    });
}
function ChatInputSubmit(props) {
    const { stop, isLoading } = context12s.useChatUI();
    const { isDisabled } = useChatInput();
    if (stop && isLoading) {
        return /*#__PURE__*/ jsxRuntime.jsx(actions12s.Button, {
            size: "icon",
            onClick: stop,
            className: "absolute bottom-2 right-2 rounded-full",
            children: /*#__PURE__*/ jsxRuntime.jsx(lucideReact.Square, {
                className: "size-3",
                fill: "white",
                stroke: "white"
            })
        });
    }
    var _props_disabled, _props_children;
    return /*#__PURE__*/ jsxRuntime.jsx(actions12s.Button, {
        type: "submit",
        size: "icon",
        disabled: (_props_disabled = props.disabled) != null ? _props_disabled : isDisabled,
        className: actions12s.cn('absolute bottom-2 right-2 rounded-full', props.className),
        children: (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsx(lucideReact.Send, {
            className: "size-4"
        })
    });
}
ChatInput.Form = ChatInputForm;
ChatInput.Field = ChatInputField;
ChatInput.Upload = ChatInputUpload;
ChatInput.Submit = ChatInputSubmit;

const chatMessageContext = React.createContext(null);
const ChatMessageProvider = chatMessageContext.Provider;
const useChatMessage = ()=>{
    const context = React.useContext(chatMessageContext);
    if (!context) throw new Error('useChatMessage must be used within a ChatMessageProvider');
    return context;
};

function EventAnnotations() {
    const { message, isLast, isLoading } = useChatMessage();
    var _ref;
    const showLoading = (_ref = isLast && isLoading) != null ? _ref : false;
    const eventData = actions12s.getAnnotationData(message, actions12s.MessageAnnotationType.EVENTS);
    if (eventData.length === 0) return null;
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.ChatEvents, {
        data: eventData,
        showLoading: showLoading
    });
}
function AgentEventAnnotations() {
    const { message, isLast } = useChatMessage();
    const agentEventData = actions12s.getAnnotationData(message, actions12s.MessageAnnotationType.AGENT_EVENTS);
    if (agentEventData.length === 0) return null;
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.ChatAgentEvents, {
        data: agentEventData,
        isFinished: Boolean(message.content),
        isLast: isLast
    });
}
function ImageAnnotations() {
    const { message } = useChatMessage();
    const imageData = actions12s.getAnnotationData(message, 'image');
    if (imageData.length === 0) return null;
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.ChatImage, {
        data: imageData[0]
    });
}
function DocumentFileAnnotations() {
    const { message } = useChatMessage();
    const contentFileData = actions12s.getAnnotationData(message, actions12s.MessageAnnotationType.DOCUMENT_FILE);
    if (contentFileData.length === 0) return null;
    const alignmentClass = message.role === 'user' ? 'ml-auto' : 'mr-auto';
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.ChatFiles, {
        data: contentFileData[0],
        className: alignmentClass
    });
}
function preprocessSourceNodes(nodes) {
    // Filter source nodes has lower score
    const processedNodes = nodes.map((node)=>{
        // remove trailing slash for node url if exists
        if (node.url) {
            node.url = node.url.replace(/\/$/, '');
        }
        return node;
    });
    return processedNodes;
}
function getSourceNodes(message) {
    const data = actions12s.getAnnotationData(message, actions12s.MessageAnnotationType.SOURCES);
    return data.map((item)=>_extends._({}, item, {
            nodes: item.nodes ? preprocessSourceNodes(item.nodes) : []
        })).flatMap((item)=>item.nodes);
}
function SourceAnnotations() {
    const { message } = useChatMessage();
    const nodes = getSourceNodes(message);
    if (nodes.length === 0) return null;
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.ChatSources, {
        data: {
            nodes
        }
    });
}
function SuggestedQuestionsAnnotations() {
    const { append, requestData } = context12s.useChatUI();
    const { message, isLast } = useChatMessage();
    if (!isLast || !append) return null;
    const suggestedQuestionsData = actions12s.getAnnotationData(message, actions12s.MessageAnnotationType.SUGGESTED_QUESTIONS);
    if (suggestedQuestionsData.length === 0) return null;
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.SuggestedQuestions, {
        questions: suggestedQuestionsData[0],
        append: append,
        requestData: requestData
    });
}

const defaultAnnotationRenderers = {
    artifact: index12s.ChatCanvas.Artifact
};

var ContentPosition = /*#__PURE__*/ function(ContentPosition) {
    ContentPosition[ContentPosition["TOP"] = -9999] = "TOP";
    ContentPosition[ContentPosition["CHAT_EVENTS"] = 0] = "CHAT_EVENTS";
    ContentPosition[ContentPosition["AFTER_EVENTS"] = 1] = "AFTER_EVENTS";
    ContentPosition[ContentPosition["CHAT_AGENT_EVENTS"] = 2] = "CHAT_AGENT_EVENTS";
    ContentPosition[ContentPosition["AFTER_AGENT_EVENTS"] = 3] = "AFTER_AGENT_EVENTS";
    ContentPosition[ContentPosition["CHAT_IMAGE"] = 4] = "CHAT_IMAGE";
    ContentPosition[ContentPosition["AFTER_IMAGE"] = 5] = "AFTER_IMAGE";
    ContentPosition[ContentPosition["BEFORE_MARKDOWN"] = 6] = "BEFORE_MARKDOWN";
    ContentPosition[ContentPosition["MARKDOWN"] = 7] = "MARKDOWN";
    ContentPosition[ContentPosition["AFTER_MARKDOWN"] = 8] = "AFTER_MARKDOWN";
    ContentPosition[ContentPosition["CHAT_DOCUMENT_FILES"] = 9] = "CHAT_DOCUMENT_FILES";
    ContentPosition[ContentPosition["AFTER_DOCUMENT_FILES"] = 10] = "AFTER_DOCUMENT_FILES";
    ContentPosition[ContentPosition["CHAT_SOURCES"] = 11] = "CHAT_SOURCES";
    ContentPosition[ContentPosition["AFTER_SOURCES"] = 12] = "AFTER_SOURCES";
    ContentPosition[ContentPosition["SUGGESTED_QUESTIONS"] = 13] = "SUGGESTED_QUESTIONS";
    ContentPosition[ContentPosition["AFTER_SUGGESTED_QUESTIONS"] = 14] = "AFTER_SUGGESTED_QUESTIONS";
    ContentPosition[ContentPosition["BOTTOM"] = 9999] = "BOTTOM";
    return ContentPosition;
}({});
function ChatMessage(props) {
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(ChatMessageAvatar, {}),
            /*#__PURE__*/ jsxRuntime.jsx(ChatMessageContent, {
                isLoading: props.isLoading,
                append: props.append
            }),
            /*#__PURE__*/ jsxRuntime.jsx(ChatMessageActions, {})
        ]
    });
    return /*#__PURE__*/ jsxRuntime.jsx(ChatMessageProvider, {
        value: {
            message: props.message,
            isLast: props.isLast,
            isLoading: props.isLoading,
            append: props.append
        },
        children: /*#__PURE__*/ jsxRuntime.jsx("div", {
            className: actions12s.cn('group flex gap-4 p-3', props.className),
            children: children
        })
    });
}
function ChatMessageAvatar(props) {
    const { message } = useChatMessage();
    if (message.role !== 'assistant') return null;
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsx(lucideReact.Bot, {
        className: "h-4 w-4"
    });
    return /*#__PURE__*/ jsxRuntime.jsx("div", {
        className: actions12s.cn('bg-background flex h-8 w-8 shrink-0 select-none items-center justify-center rounded-full border', props.className),
        children: children
    });
}
function ChatMessageContent(props) {
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(EventAnnotations, {}),
            /*#__PURE__*/ jsxRuntime.jsx(AgentEventAnnotations, {}),
            /*#__PURE__*/ jsxRuntime.jsx(ImageAnnotations, {}),
            /*#__PURE__*/ jsxRuntime.jsx(ChatMarkdown, {}),
            /*#__PURE__*/ jsxRuntime.jsx(DocumentFileAnnotations, {}),
            /*#__PURE__*/ jsxRuntime.jsx(SourceAnnotations, {}),
            /*#__PURE__*/ jsxRuntime.jsx(SuggestedQuestionsAnnotations, {})
        ]
    });
    return /*#__PURE__*/ jsxRuntime.jsx("div", {
        className: actions12s.cn('flex min-w-0 flex-1 flex-col gap-4', props.className),
        children: children
    });
}
function ChatMarkdown(props) {
    const { message } = useChatMessage();
    const nodes = React.useMemo(()=>getSourceNodes(message), [
        message
    ]);
    var _props_annotationRenderers;
    return /*#__PURE__*/ jsxRuntime.jsx(index_cjs.Markdown, {
        content: message.content,
        sources: {
            nodes
        },
        citationComponent: props.citationComponent,
        languageRenderers: props.languageRenderers,
        annotationRenderers: (_props_annotationRenderers = props.annotationRenderers) != null ? _props_annotationRenderers : defaultAnnotationRenderers,
        className: actions12s.cn({
            'bg-primary text-primary-foreground ml-auto w-fit max-w-[80%] rounded-xl px-3 py-2': message.role === 'user'
        }, props.className)
    });
}
function ChatMessageActions(props) {
    const { reload, requestData, isLoading } = context12s.useChatUI();
    const { isCopied, copyToClipboard } = useCopyToClipboard12s.useCopyToClipboard({
        timeout: 2000
    });
    const { message, isLast } = useChatMessage();
    if (message.role !== 'assistant') return null;
    const isLastMessageFromAssistant = message.role === 'assistant' && isLast;
    const showReload = reload && !isLoading && isLastMessageFromAssistant;
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(actions12s.Button, {
                title: "Copy",
                onClick: ()=>copyToClipboard(message.content),
                size: "icon",
                variant: "outline",
                className: "h-8 w-8",
                children: isCopied ? /*#__PURE__*/ jsxRuntime.jsx(lucideReact.Check, {
                    className: "h-4 w-4"
                }) : /*#__PURE__*/ jsxRuntime.jsx(lucideReact.Copy, {
                    className: "h-4 w-4"
                })
            }),
            showReload && /*#__PURE__*/ jsxRuntime.jsx(actions12s.Button, {
                title: "Regenerate",
                variant: "outline",
                size: "icon",
                onClick: ()=>reload == null ? void 0 : reload({
                        data: requestData
                    }),
                className: "h-8 w-8",
                children: /*#__PURE__*/ jsxRuntime.jsx(lucideReact.RefreshCw, {
                    className: "h-4 w-4"
                })
            })
        ]
    });
    return /*#__PURE__*/ jsxRuntime.jsx("div", {
        className: actions12s.cn('flex shrink-0 flex-col gap-2', props.className),
        children: children
    });
}
const PrimiviteChatMessage = /*#__PURE__*/ React.memo(ChatMessage, (prevProps, nextProps)=>{
    return !nextProps.isLast && prevProps.isLast === nextProps.isLast && prevProps.message === nextProps.message;
});
PrimiviteChatMessage.Content = ChatMessageContent;
PrimiviteChatMessage.Content.Event = EventAnnotations;
PrimiviteChatMessage.Content.AgentEvent = AgentEventAnnotations;
PrimiviteChatMessage.Content.Image = ImageAnnotations;
PrimiviteChatMessage.Content.Markdown = ChatMarkdown;
PrimiviteChatMessage.Content.DocumentFile = DocumentFileAnnotations;
PrimiviteChatMessage.Content.Source = SourceAnnotations;
PrimiviteChatMessage.Content.SuggestedQuestions = SuggestedQuestionsAnnotations;
PrimiviteChatMessage.Avatar = ChatMessageAvatar;
PrimiviteChatMessage.Actions = ChatMessageActions;

const chatMessagesContext = /*#__PURE__*/ React.createContext(null);
const ChatMessagesProvider = chatMessagesContext.Provider;
const useChatMessages = ()=>{
    const context = React.useContext(chatMessagesContext);
    if (!context) {
        throw new Error('useChatMessages must be used within a ChatMessagesProvider');
    }
    return context;
};
function ChatMessages(props) {
    const { messages, reload, stop, isLoading } = context12s.useChatUI();
    const messageLength = messages.length;
    const lastMessage = messages[messageLength - 1];
    const isLastMessageFromAssistant = messageLength > 0 && (lastMessage == null ? void 0 : lastMessage.role) !== 'user';
    const showReload = reload && !isLoading && isLastMessageFromAssistant;
    const showStop = stop && isLoading;
    // `isPending` indicate
    // that stream response is not yet received from the server,
    // so we show a loading indicator to give a better UX.
    const isPending = isLoading && !isLastMessageFromAssistant;
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsx(ChatMessagesList, {});
    return /*#__PURE__*/ jsxRuntime.jsx(ChatMessagesProvider, {
        value: {
            isPending,
            showReload,
            showStop,
            lastMessage,
            messageLength
        },
        children: /*#__PURE__*/ jsxRuntime.jsx("div", {
            className: actions12s.cn('bg-background relative flex min-h-0 flex-1 flex-col space-y-6 p-4 pb-0', props.className),
            children: children
        })
    });
}
function ChatMessagesList(props) {
    const scrollableChatContainerRef = React.useRef(null);
    const { messages, isLoading, append } = context12s.useChatUI();
    const { lastMessage, messageLength } = useChatMessages();
    const scrollToBottom = ()=>{
        if (scrollableChatContainerRef.current) {
            scrollableChatContainerRef.current.scrollTop = scrollableChatContainerRef.current.scrollHeight;
        }
    };
    React.useEffect(()=>{
        scrollToBottom();
    }, [
        messageLength,
        lastMessage
    ]);
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            messages.map((message, index)=>{
                return /*#__PURE__*/ jsxRuntime.jsx(PrimiviteChatMessage, {
                    message: message,
                    isLast: index === messageLength - 1,
                    isLoading: isLoading,
                    append: append
                }, index);
            }),
            /*#__PURE__*/ jsxRuntime.jsx(ChatMessagesEmpty, {}),
            /*#__PURE__*/ jsxRuntime.jsx(ChatMessagesLoading, {})
        ]
    });
    return /*#__PURE__*/ jsxRuntime.jsx("div", {
        className: actions12s.cn('flex min-h-0 flex-1 flex-col gap-5 overflow-auto', props.className),
        ref: scrollableChatContainerRef,
        children: children
    });
}
function ChatMessagesEmpty(props) {
    const { messages } = context12s.useChatUI();
    if (messages.length > 0) return null;
    if (props.children) {
        return /*#__PURE__*/ jsxRuntime.jsx("div", {
            className: actions12s.cn('flex h-full flex-col justify-center pt-4', props.className),
            children: props.children
        });
    }
    var _props_heading, _props_subheading;
    return /*#__PURE__*/ jsxRuntime.jsxs("div", {
        className: actions12s.cn('flex h-full flex-col justify-center pt-4', props.className),
        children: [
            /*#__PURE__*/ jsxRuntime.jsx("p", {
                className: "mb-2 animate-[slide-up_0.5s_ease-out] text-3xl font-bold opacity-0 [animation-delay:100ms] [animation-fill-mode:forwards]",
                children: (_props_heading = props.heading) != null ? _props_heading : 'Hello there!'
            }),
            /*#__PURE__*/ jsxRuntime.jsx("p", {
                className: "text-muted-foreground animate-[slide-up_0.5s_ease-out] text-xl opacity-0 [animation-delay:300ms] [animation-fill-mode:forwards]",
                children: (_props_subheading = props.subheading) != null ? _props_subheading : "I'm here to help you with your questions."
            }),
            /*#__PURE__*/ jsxRuntime.jsx("style", {
                children: `
        @keyframes slide-up {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        .animate-slide-up {
          animation: slide-up 0.5s ease-out;
        }
      `
            })
        ]
    });
}
function ChatMessagesLoading(props) {
    const { isPending } = useChatMessages();
    if (!isPending) return null;
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsx(lucideReact.Loader2, {
        className: "h-4 w-4 animate-spin"
    });
    return /*#__PURE__*/ jsxRuntime.jsx("div", {
        className: actions12s.cn('flex items-center justify-center pt-4', props.className),
        children: children
    });
}
function ChatActions(props) {
    const { reload, stop, requestData } = context12s.useChatUI();
    const { showReload, showStop } = useChatMessages();
    if (!showStop && !showReload) return null;
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            showStop && /*#__PURE__*/ jsxRuntime.jsxs(actions12s.Button, {
                variant: "outline",
                size: "sm",
                onClick: stop,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(lucideReact.PauseCircle, {
                        className: "mr-2 h-4 w-4"
                    }),
                    "Stop generating"
                ]
            }),
            showReload && /*#__PURE__*/ jsxRuntime.jsxs(actions12s.Button, {
                variant: "outline",
                size: "sm",
                onClick: ()=>reload == null ? void 0 : reload({
                        data: requestData
                    }),
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(lucideReact.RefreshCw, {
                        className: "mr-2 h-4 w-4"
                    }),
                    "Regenerate"
                ]
            })
        ]
    });
    return /*#__PURE__*/ jsxRuntime.jsx("div", {
        className: actions12s.cn('flex justify-end gap-4', props.className),
        children: children
    });
}
ChatMessages.List = ChatMessagesList;
ChatMessages.Loading = ChatMessagesLoading;
ChatMessages.Empty = ChatMessagesEmpty;
ChatMessages.Actions = ChatActions;

function ChatSection(props) {
    const { handler, className } = props;
    const [requestData, setRequestData] = React.useState();
    var _props_children;
    const children = (_props_children = props.children) != null ? _props_children : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(ChatMessages, {}),
            /*#__PURE__*/ jsxRuntime.jsx(ChatInput, {})
        ]
    });
    return /*#__PURE__*/ jsxRuntime.jsx(context12s.ChatProvider, {
        value: _extends._({}, handler, {
            requestData,
            setRequestData
        }),
        children: /*#__PURE__*/ jsxRuntime.jsx("div", {
            className: actions12s.cn('flex h-full w-full flex-col gap-4 p-5', className),
            children: /*#__PURE__*/ jsxRuntime.jsx(context12s.ChatCanvasProvider, {
                children: children
            })
        })
    });
}

exports.MessageAnnotationType = actions12s.MessageAnnotationType;
exports.extractArtifactsFromAllMessages = actions12s.extractArtifactsFromAllMessages;
exports.extractArtifactsFromMessage = actions12s.extractArtifactsFromMessage;
exports.getAnnotationData = actions12s.getAnnotationData;
exports.getInlineAnnotations = actions12s.getInlineAnnotations;
exports.isEqualArtifact = actions12s.isEqualArtifact;
exports.isMessageAnnotation = actions12s.isMessageAnnotation;
exports.parseInlineAnnotation = actions12s.parseInlineAnnotation;
exports.toInlineAnnotation = actions12s.toInlineAnnotation;
exports.useChatCanvas = context12s.useChatCanvas;
exports.useChatUI = context12s.useChatUI;
exports.ChatCanvas = index12s.ChatCanvas;
exports.useFile = useFile12s.useFile;
exports.ChatInput = ChatInput;
exports.ChatMessage = PrimiviteChatMessage;
exports.ChatMessages = ChatMessages;
exports.ChatSection = ChatSection;
exports.ContentPosition = ContentPosition;
exports.defaultAnnotationRenderers = defaultAnnotationRenderers;
exports.useChatInput = useChatInput;
exports.useChatMessage = useChatMessage;
exports.useChatMessages = useChatMessages;
