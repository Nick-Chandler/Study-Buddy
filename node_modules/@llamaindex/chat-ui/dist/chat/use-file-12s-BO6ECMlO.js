'use client';
import { _ } from '@swc/helpers/_/_async_to_generator';
import { _ as _$1 } from '@swc/helpers/_/_extends';
import { useState } from 'react';

function useFile({ uploadAPI }) {
    const [imageUrl, setImageUrl] = useState(null);
    const [files, setFiles] = useState([]);
    const addDoc = (file)=>{
        const existedFile = files.find((f)=>f.id === file.id);
        if (!existedFile) {
            setFiles((prev)=>[
                    ...prev,
                    file
                ]);
            return true;
        }
        return false;
    };
    const removeDoc = (file)=>{
        setFiles((prev)=>prev.filter((f)=>f.id !== file.id));
    };
    const reset = ()=>{
        imageUrl && setImageUrl(null);
        files.length && setFiles([]);
    };
    const uploadContent = (file, requestParams = {})=>_(function*() {
            const base64 = yield readContent({
                file,
                asUrl: true
            });
            const response = yield fetch(uploadAPI, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(_$1({}, requestParams, {
                    base64,
                    name: file.name
                }))
            });
            if (!response.ok) throw new Error('Failed to upload document.');
            return yield response.json();
        })();
    const getAnnotations = ()=>{
        const annotations = [];
        if (imageUrl) {
            annotations.push({
                type: 'image',
                data: {
                    url: imageUrl
                }
            });
        }
        if (files.length > 0) {
            annotations.push({
                type: 'document_file',
                data: {
                    files
                }
            });
        }
        return annotations;
    };
    const readContent = (input)=>_(function*() {
            const { file, asUrl } = input;
            const content = yield new Promise((resolve, reject)=>{
                const reader = new FileReader();
                if (asUrl) {
                    reader.readAsDataURL(file);
                } else {
                    reader.readAsText(file);
                }
                reader.onload = ()=>resolve(reader.result);
                reader.onerror = (error)=>reject(error);
            });
            return content;
        })();
    const uploadFile = (file, requestParams = {})=>_(function*() {
            if (file.type.startsWith('image/')) {
                const base64 = yield readContent({
                    file,
                    asUrl: true
                });
                return setImageUrl(base64);
            }
            // Upload any non-image file as a document
            const newDoc = yield uploadContent(file, requestParams);
            return addDoc(newDoc);
        })();
    return {
        imageUrl,
        setImageUrl,
        files,
        removeDoc,
        reset,
        getAnnotations,
        uploadFile
    };
}

export { useFile as u };
